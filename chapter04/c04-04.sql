-- c04-04.sql

-- 04 인덱스
-- 인덱스와 B-tree
-- 인덱스란 자료를 쉽게 빠르게 찾을 수 있도록 만든 데이터 구조이다.
-- 도서관에서 책을 찾을 때 서지 목록을 보고 책의 위치를 찾는 것처럼 인덱스도 같은 역활을 한다
-- 데이터베이스에서 인덱스란 원하는 데이터를 빨리 찾기 위해 투플의 키값에 대한 물리적 위치를
-- 기록해 둔 자료 구조이다.
-- 일반적인 RDBMS의 인덱스는 대부분 B-tree구조로 되어 있다.

-- B-tree(Balanced-tree)는 데이터의 검색 시간을 단축하기 위한 자료 구조로, 바이어가
-- 고안하였다. B-tree는 루트 노드, 내부 노드, 리프 노드로 구성되며, 리프 노드가 모두 같은
-- 레벨에 존재하는 균형 트리이다.

-- 오라클 인덱스
-- 인덱스 생성
-- 인덱스는 데이터 검색을 빨리 하기 위해 사용한다. 

-- 어떤 경우에는 인덱스를 생성하면 검색이 더 느려지고 저장 공간만 낭비하기 된다.
-- 따라서 인덱스 생성에 앞서 고려사항을 충분히 살펴봐야 한다.
-- 인덱스는 where절에 자주 사용되는 속성이어야 한다.
-- 인덱스는 조인에 자주 사용되는 속성이어야 한다.
-- 단일 테이블에 인덱스가 많으면 속도가 느려질 수 있다(테이블당 4~5개 정도 권장)
-- 속성이  가공되는 경우 사용하지 않는다
-- 속성의 선택도가 낮을 때 유리하다(속성의 모든 값이 다른 경우)

-- 인덱스 생성 문법
-- create [reverse] [unique] index [인덱스이름]
-- on 테이블이름 (컬럼[asc|desc][{,컬럼[asc|desc]}...])[;]
-- revers는 역순으로 인덱스를 생성한다
-- unique는 테이블의 속성값에 대하여 종복이 없는 유일한 인덱스를 생성하는 것을 말한다.
-- asc|desc 는 컬럼 값의 정렬 방식을 의미한다.

-- book 테이블의 bookname열을 대상으로 인덱스 ix_book을 생성하시오
create index ix_book on book(bookname);

-- book 테이블의 publisher, price 열을 대상으로 인덱스 ix_book2를 생성하시오.
create index ix_book2 on book(publisher, price);

-- 오라클이 생성된 인덱스를 활용하여 sql문을 처리하는지 확인하려면 sql developer에서
-- sql문을 실행하기 전에 f10키를 누르면 된다. 실행 계획이 나타나면서 인덱스를 활용하여
-- 결과를 출력하는 과정을 볼 수 있다.
select * 
from book
where publisher='대한미디어' and price >=30000;

-- 인덱스의 재구성과 삭제
-- 인덱스의 재구성 문법
-- alter [reverse] [unique] index 인덱스이름
-- [on {only}테이블 이름 (컬럼이름[{,컬럼이름}...)] rebuild[;]

-- B-tree인덱스는 데이터의 수정, 삭제, 삽입이 잦으면 노드의 갱신이 주기적으로 일어나
-- 단편화 현상이 나타난다. 단편화란 삭제된 레코드의 인덱스 값 자리가 비게 되는 상태를
-- 말하는데, 이는 검색 시 성능 저하로 이어진다.

-- 인덱스 ix_book을 재생성하시오.
alter index ix_book rebuild;

-- 하나의 테이블에 인덱스가 많으면 데이터베이스 성능에 좋지 않은 영향을 미친다.
-- 그러므로 사용하지 않는 인덱스는 삭제해야 한다.
-- 인덱스 삭제 문법
-- drop index 인덱스 이름[;]

-- 인덱스 ix_book을 삭제하시오.
drop index ix_book;

-- 데이터베이스 성능을 향상 시키는 것을 데이터베이스 튜닝이라고 합니다.
-- 데이터베이스 튜닝에 인덱스를 활용할 수 있습니다.
-- 원초적인 해결은 데이터를 분리 저장해서 검색 대상을 줄여 속도를 대폭적으로 개선하는
-- 방법이 가장 좋다.













